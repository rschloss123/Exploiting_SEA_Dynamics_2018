% Animate the motion of the 2-link Draco leg 
function animate_results(utilize_compliance, trajectory, N, foot_length1, foot_length2, input, c_constraint, mu, compare,u)
    global L_1 L_2 L_c1 L_c2 time_step m_1 m_2
    
    if compare == 1
        % compare rigid vs compliant
        %animate_results(0, 0, 0, 0, 0, 0, 0, 0, 1,0)
        load('animation_parameters', 'N','foot_length1','foot_length2','mu')
        filename = 'nominal_rigid_trajectory.mat';
        load(filename)
        trajectory_r = zcvx; 
        filename = 'rigid_constraints.mat';
        load(filename)
        rigid_constraints = c_constraint; 
        utilize_compliance = 0; 
        [z1_f_r, z2_f_r, z_dot_1_f_r, z_dot_2_f_r] = final_states(trajectory_r, utilize_compliance, N);
        [time_count_r, y_trajectory_r] = jump_motion(z1_f_r,z2_f_r,z_dot_1_f_r,z_dot_2_f_r);               
        filename = 'nominal_compliant_trajectory.mat';
        load(filename)        
        trajectory_c = x_compare_convergence; 
        filename = 'compliant_constraints.mat';        
        load(filename)   
        compliant_constraints = c_constraint; 
        utilize_compliance = 1; 
        [z1_f_c, z2_f_c, z_dot_1_f_c, z_dot_2_f_c] = final_states(trajectory_c, utilize_compliance, N);
        [time_count_c, y_trajectory_c] = jump_motion(z1_f_c,z2_f_c,z_dot_1_f_c,z_dot_2_f_c);                          
        
        
        double_jump(trajectory_r, trajectory_c, y_trajectory_r, y_trajectory_c,...
        N,rigid_constraints,compliant_constraints,time_count_r,...
        time_count_c,foot_length1,...
        foot_length2,mu)
    else
        [z1_f, z2_f, z_dot_1_f, z_dot_2_f] = final_states(trajectory, utilize_compliance,N);
        [time_count, y_hip] = jump_motion(z1_f,z2_f,z_dot_1_f,z_dot_2_f); 
        single_jump(trajectory,N,utilize_compliance,c_constraint,y_hip,time_count,foot_length1, foot_length2,input,mu,u)
    end    
   
   
end 

% Compute final position and velocity
function [z1_f, z2_f, z_dot_1_f, z_dot_2_f] = final_states(trajectory, utilize_compliance,N)

    if utilize_compliance == 1
        z1_f = trajectory(N,1)+trajectory(N,3);
        z2_f = trajectory(N,5)+trajectory(N,7);
        z_dot_1_f = trajectory(N,2)+trajectory(N,4); 
        z_dot_2_f = trajectory(N,6)+trajectory(N,8);
    else 
        z1_f = trajectory(N,1);
        z2_f = trajectory(N,3);
        z_dot_1_f = trajectory(N,2);
        z_dot_2_f = trajectory(N,4);        
    end

end

% Compute center of mass motion once foot lifts off the ground
function [time_count, y_trajectory] = jump_motion(z1_f,z2_f,z_dot_1_f,z_dot_2_f)

    theta1_f = get_theta1(z1_f);
    theta2_unshift_f = get_theta_2(z2_f);
    Tdot1_f = get_ankle_jacobian(z1_f);
    Tdot2_f = solve_knee_jacobians2(theta2_unshift_f);     
    vf_hip = get_y_velocity(theta1_f,theta2_unshift_f,z_dot_1_f,...
        z_dot_2_f,Tdot1_f,Tdot2_f);    
    peak_time = vf_hip/9.81;
    peak_height = vf_hip*peak_time -.5*9.81*peak_time^2;
    land_time = (peak_height/(9.81*.5))^(1/2)';
    jump_time = round(peak_time+land_time,2);
    time_count = 1; 
    for time = 0:.01:jump_time
       y_trajectory(time_count) = vf_hip*time-.5*(9.81)*time^2; 
       time_count = time_count+1;
    end
    time_count = time_count-1;  

end 

% Animate the jumping motion of one robot leg. 
function single_jump(trajectory,N,utilize_compliance,c_constraint,y_hip,time_count,foot_length1, foot_length2,input,mu,u)
    global time_step m_1 m_2
    % Animation
    figure()
    clf()

    
    v = VideoWriter('new1');
    % v.framerate=60;
    v.FrameRate = 1/time_step; 
    v.Quality=98;
    disp(v.VideoCompressionMethod)
    open(v)
    for i=1:N
        % visualization in a plot
        clf()
        axs=plot([0,0],[0,0]);
        if utilize_compliance == 1 
            % link 1
            x1= [1,0,1,0,0,0,0,0]*trajectory(i,:)';
            % link 2
            x2= [0,0,0,0,1,0,1,0]*trajectory(i,:)';    
        elseif utilize_compliance == 0
            % link 1
            x1= [1,0,0,0]*trajectory(i,:)';
            % link 2
            x2= [0,0,1,0]*trajectory(i,:)'; 
        end
        theta1=get_theta1(x1); 
        theta2_unshift= get_theta_2(x2); 
        theta2_shift = theta2_unshift+pi; 

        [l1, l2, m1, m2, com_x, com_y] = link_animation_components(theta1, theta2_shift);

        plot_links(l1, l2, 0, com_x, com_y, foot_length1,...
            foot_length2, m1, m2)
%         if i < N
%             printu1 = num2str(u(i,1));
%             printu2 = num2str(u(i,2));
%             text(.1,1.05,printu1)
%             text(.1,1,printu2)
%             print_time = num2str((i-1)*time_step);
%             text(.1,1.1,print_time)
%         end 

        if input == 1
        % plot reaction forces 
            if i < N
                reaction = c_constraint(i,:);
                reactions(reaction, mu, foot_length1, foot_length2, 0)
            end     
        end

        if utilize_compliance == 1
            [points1, points2] = animate_springs(trajectory, theta1, theta2_shift, i);
        else
            points1 = 0; 
            points2 = 0; 
        end 
        plot([-.5 .4],[-.005 -.005],'-','Color',[.5 .5 .5])
        axis('equal')

        axis([-.5,.4,-.1,1.3])
        set(gca, 'YTickLabel',[]);
        set(gca, 'YTick',[]);
        set(gca, 'XTickLabel',[]);
        set(gca, 'XTick',[]);  
        drawnow
    %     F(i)=getframe;
        writeVideo(v,getframe)
        %pause(0.001)
    end

    % motion once foot has lifted off ground
    for time = 1:time_count
        clf()
        axs=plot([0,0],[0,0]);
        y = y_hip(time);
        jumping_motion(0, m1, m2, l1, l2, points1, points2,...
            y, com_x, com_y, foot_length1, foot_length2);

        plot([-.5 .4],[-.005 -.005],'-','Color',[.5 .5 .5])
        axis('equal')

        axis([-.5,.4,-.1,1.3])
        set(gca, 'YTickLabel',[]);
        set(gca, 'YTick',[]);
        set(gca, 'XTickLabel',[]);
        set(gca, 'XTick',[]);  
        
        drawnow
        writeVideo(v,getframe) 
    end   
    

    close(v)

end 

% Animate motion of rigid and compliant motions side-by-side
function double_jump(trajectory_r, trajectory_c, y_trajectory_r, y_trajectory_c,...
    N,rigid_constraints,compliant_constraints,time_count_r,...
    time_count_c,foot_length1,...
    foot_length2,mu)
    global  time_step m_1 m_2
    % Animation
    shift_left = -1;
    figure()
    clf()
    
    v = VideoWriter('new1');
    % v.framerate=60;
    v.FrameRate = 1/time_step; 
    v.Quality=98;
    disp(v.VideoCompressionMethod)
    open(v)
    for i=1:N
        % visualization in a plot
        clf()
        axs=plot([0,0],[0,0]);

        % Positions
        % Compliant 
        % link 1
        x1_c= [1,0,1,0,0,0,0,0]*trajectory_c(i,:)';
        % link 2
        x2_c= [0,0,0,0,1,0,1,0]*trajectory_c(i,:)';    
        % Rigid 
        % link 1
        x1_r= [1,0,0,0]*trajectory_r(i,:)';
        % link 2
        x2_r= [0,0,1,0]*trajectory_r(i,:)'; 
        % Theta's 
        % Compliant
        theta1_c=get_theta1(x1_c); 
        theta2_unshift_c= get_theta_2(x2_c); 
        theta2_shift_c = theta2_unshift_c+pi;         
        % Rigid 
        theta1_r=get_theta1(x1_r); 
        theta2_unshift_r= get_theta_2(x2_r); 
        theta2_shift_r = theta2_unshift_r+pi; 
        % Links 
        
        [l1_c, l2_c, m1_c, m2_c, com_x_c, com_y_c] = link_animation_components(theta1_c, theta2_shift_c);
        [l1_r, l2_r, m1_r, m2_r, com_x_r, com_y_r] = link_animation_components(theta1_r, theta2_shift_r);
        % Compliant
        plot_links(l1_c, l2_c, 0, com_x_c, com_y_c, foot_length1,...
            foot_length2, m1_c, m2_c)
        % Rigid 
        plot_links(l1_r, l2_r, shift_left, com_x_r, com_y_r, foot_length1,...
            foot_length2, m1_r, m2_r)        

    % plot reaction forces 
        if i < N
            % Compliant
            reaction_c = compliant_constraints(i,:); 
            reactions(reaction_c, mu, foot_length1, foot_length2, 0)                                     
            % Rigid 
            reaction_r = rigid_constraints(i,:); 
            reactions(reaction_r, mu, foot_length1, foot_length2, shift_left) 

        end     

       % Springs for Compliant Case 
       [points1, points2] = animate_springs(trajectory_c, theta1_c, theta2_shift_c, i); 

        % Floor 
        plot([-1.5 .4],[-.005 -.005],'-','Color',[.5 .5 .5])
        axis('equal')
        

        axis([-1.5,.4,-.1,1.3])
        set(gca, 'YTickLabel',[]);
        set(gca, 'YTick',[]);
        set(gca, 'XTickLabel',[]);
        set(gca, 'XTick',[]);  
        drawnow
        writeVideo(v,getframe)

    end

    time_count = max(time_count_r,time_count_c);
    max_com_c = 0;
    max_com_r = 0; 
    % motion once robots have lifted off ground
    for time = 1:time_count
        clf()
        axs=plot([0,0],[0,0]);
        % Compliant
        if time <= time_count_c
            y_c = y_trajectory_c(time);
        end 
        com_compare_c = jumping_motion(0, m1_c, m2_c, l1_c, l2_c, points1, points2, y_c,...
            com_x_c, com_y_c, foot_length1, foot_length2);       
        if com_compare_c > max_com_c
           max_com_c = com_compare_c;  
        end
        % Rigid 
        if time <= time_count_r
            y_r = y_trajectory_r(time);
        end
        com_compare_r = jumping_motion(shift_left, m1_r, m2_r, l1_r, l2_r, 0, 0, y_r,...
            com_x_r, com_y_r, foot_length1, foot_length2);      
        if com_compare_r > max_com_r
           max_com_r = com_compare_r;  
        end        
        plot([-1.5 .4],[-.005 -.005],'-','Color',[.5 .5 .5])
        axis('equal')

        axis([-1.5,.4,-.1,1.3])
        set(gca, 'YTickLabel',[]);
        set(gca, 'YTick',[]);
        set(gca, 'XTickLabel',[]);
        set(gca, 'XTick',[]);  
        
        drawnow
        writeVideo(v,getframe) 

    end
    
    % mark maximum center of mass height
    for count = 1:100
        plot([-1.5 .4],[max_com_c max_com_c],'--','Color','r')
        plot([-1.5 .4],[max_com_r max_com_r],'--','Color','r')
        drawnow
        writeVideo(v,getframe)    
    end
    close(v)

end 

function com_y_absolute = jumping_motion(shift_left, m1, m2, l1, l2, points1, points2,...
    y, com_x, com_y, foot_length1, foot_length2)

    plot([shift_left+0, shift_left+l1(1)],[0+y,l1(2)+y],'o-','Linewidth',1.3, 'Color', '[.5 .5 .5]');
    hold on
    plot([shift_left+l1(1), shift_left+l2(1)],[l1(2)+y,l2(2)+y],'Linewidth',1.3,'Color', '[.5 .5 .5]')
    com_y_absolute = com_y+y;
    plot([shift_left+com_x],[com_y_absolute],'^','MarkerSize',10, 'Color','k','MarkerFaceColor','k')                
    plot([shift_left-foot_length1,shift_left+foot_length2],[0+y,0+y],'Linewidth',1.3,'Color', '[.5 .5 .5]')
    plot([shift_left+m1(1)],[m1(2)+y],'o','MarkerSize',20, 'Color','[.5 .5 .5]')
    plot([shift_left+m2(1)],[m2(2)+y],'o','MarkerSize',20, 'Color','[.5 .5 .5]')
    if points1 ~= 0
        plot(points1(1,:), points1(2,:)+y,'o','MarkerSize',10, 'Color', '[.5 .5 .5]');
        plot(points2(1,:), points2(2,:)+y,'o','MarkerSize',10,'Color', '[.5 .5 .5]');        
    end

end

function reactions(reaction, mu, foot_length1, foot_length2, shift_left) 
        point1 = [-foot_length1;0];
        R1 = .005*(reaction(1,1)*[mu;1]+reaction(1,2)*[-mu;1]);
        plot([shift_left+point1(1),shift_left+point1(1)+R1(1)],[point1(2),point1(2)+R1(2)])
        point2 = [foot_length2;0];
        R2 = .005*(reaction(1,3)*[mu;1]+reaction(1,4)*[-mu;1]);
        plot([shift_left+point2(1),shift_left+point2(1)+R2(1)],[point2(2),point2(2)+R2(2)])

end 

function plot_links(l1, l2, shift_left, com_x, com_y, foot_length1,...
    foot_length2, m1, m2)

        plot([shift_left+0, shift_left+l1(1)],[0,l1(2)],'o-','Linewidth',1.3, 'Color', 'k');  
        hold on
        plot([shift_left+l1(1), shift_left+l2(1)],[l1(2),l2(2)],'Linewidth',1.3,'Color', 'k')        
        % Center of Mass 
        plot([shift_left+com_x],[com_y],'^','MarkerSize',10, 'Color','k')

        % Mass of Individual Links 
        plot([shift_left-foot_length1,shift_left+foot_length2],[0,0],'Linewidth',1.3,'Color', 'k')
        plot([shift_left+m1(1)],[m1(2)],'o','MarkerSize',20, 'Color','[.3 .2 .1]')
        plot([shift_left+m2(1)],[m2(2)],'o','MarkerSize',20, 'Color','[.3 .2 .1]')
end 

function [points1, points2] = animate_springs(trajectory, theta1, theta2_shift, i) 

    delta1 = [1,0,0,0,0,0,0,0]*trajectory(i,:)';
    delta2 = [0,0,0,0,1,0,0,0]*trajectory(i,:)';
    springscale = 25; 
    [points1, points2] = get_spring_locations(theta1, theta2_shift, delta1*springscale, delta2*springscale);
    plot(points1(1,:), points1(2,:),'o','MarkerSize',10, 'Color', 'm');
    plot(points2(1,:), points2(2,:),'o','MarkerSize',10,'Color', 'm');

end 