% Used to compute reaction forces on foot
function [wrench_nominal,Constraint_Jacobian] = ...
    ContraintComponents(x_input,x1_est,x2_est,dx1_est,...
    dx2_est,ddx1_est,ddx2_est,bias_lin,...
    utilize_compliance)
    global m_1 m_2 L_1 L_c1 L_c2 time_step J1 J2

    % angular position, velocity, and acceleration of the two links
    [theta_1, theta_dot1,theta_doubledot1, ~,theta_2_shift, theta_dot2,...
        theta_double_dot2, Am1,Am2,Tdot1,~,Tdot2,~] =...
        get_pos_vel_acc(x_input,x1_est,dx1_est,x2_est,dx2_est,ddx1_est,ddx2_est,...
        utilize_compliance);
    
    % rigid body dynamics
    [H11, H22, H12, H21, h, G1, G2] = get_dynamic_components(theta_1,theta_2_shift);

    % Actuator torques 
    [T1,T2] = get_torques(H11, H22, H12, H21, h, G1, G2,...
    theta_doubledot1, theta_double_dot2, theta_dot2, theta_dot1);
  
    
    % derivative of F_x with respect to theta_double-dot1
    dFx_dalpha1 = -m_1*L_c1*sin(theta_1)-m_2*L_1*sin(theta_1)-m_2*L_c2*sin(theta_1+theta_2_shift);
    % derivative of F_x with respect to theta_double-dot2
    dFx_dalpha2 = -m_2*L_c2*sin(theta_1+theta_2_shift); 
    % derivative of F_y with respect to theta_double-dot1
    dFy_dalpha1 = m_1*L_c1*cos(theta_1)+m_2*L_1*cos(theta_1)+m_2*L_c2*cos(theta_1+theta_2_shift);
    % derivative of F_y with respect to theta_double-dot2
    dFy_dalpha2 = m_2*L_c2*cos(theta_1+theta_2_shift);
    % derivative of torque with respect to theta_double-dot1
    dT_dalpha1 = H11;
    % derivative of torque with respect to theta_double-dot2
    dT_dalpha2 = H12;
    
    Constraint_Jacobian = ...
              [dFx_dalpha1, dFx_dalpha2;...
               dFy_dalpha1, dFy_dalpha2;...
               dT_dalpha1, dT_dalpha2]...
              *[Tdot1 0; 0 Tdot2];

    % expected acceleration
    acceleration_adjust = [ddx1_est; ddx2_est];
    % F_x, F_y, and T balances 
    x_nominal = m_1*Am1(1)+m_2*Am2(1);
    y_nominal = m_1*9.81+m_2*9.81+m_1*Am1(2)+m_2*Am2(2);
    torque_nominal = T1;
    
    if utilize_compliance == 1
        adjust_nominal_acceleration = ...
            Constraint_Jacobian*(-[0,1,0,1,0,0,0,0;0,0,0,0,0,1,0,1]*(bias_lin)/time_step);
    else
        adjust_nominal_acceleration = ...
            Constraint_Jacobian*(-[0,1,0,0;0,0,0,1]*(bias_lin)/time_step);
    end
    
    wrench_nominal = [x_nominal; y_nominal; torque_nominal]-adjust_nominal_acceleration-Constraint_Jacobian*acceleration_adjust;     

end




       