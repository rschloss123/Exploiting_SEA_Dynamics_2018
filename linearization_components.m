% Return several matrices and vectors which are needed for our method.
% Outputs depend on if we are simulating rigid or compliant dynamics
function [s1v, s2v,B1_1, B1_2, B1_3, B1_4, B_12, B_34,B1_12, B1_34,...
    B1_1_NC, B1_2_NC, B1_3_NC, B1_4_NC, s1v_NC, s2v_NC, B_12_NC,...
    B_34_NC] = ...
    linearization_components(Euler_method, utilize_compliance, ...
    B_1, B, B_1_NC, B_NC)
    
    % Choose velocity terms from state vectors 
    s1v = [0 1 0 1 0 0 0 0];
    s2v = [0 0 0 0 0 1 0 1];

    % components of continuous matrix B1
    B1_1 = B_1(:,1);
    B1_2 = B_1(:,2);
    B1_3 = B_1(:,3);
    B1_4 = B_1(:,4);
    if Euler_method == 1
        B1_12 = B_1(:,1:2);
        B1_34 = B_1(:,3:4);
    else
        B1_12 = NaN;
        B1_34 = NaN;        
    end
    % components of discrete matrix B
    B_12 = B(:,1:2);
    B_34 = B(:,3:4);
    
    if utilize_compliance == 0
        B1_1_NC = B_1_NC(:,1);
        B1_2_NC = B_1_NC(:,2);
        B1_3_NC = B_1_NC(:,3);
        B1_4_NC = B_1_NC(:,4);
        s1v_NC = [0 1 0 0];
        s2v_NC = [0 0 0 1];
        B_12_NC = B_NC(:,1:2);
        B_34_NC = B_NC(:,3:4);
    else 
        B1_1_NC = NaN;
        B1_2_NC = NaN;
        B1_3_NC = NaN;
        B1_4_NC = NaN;
        s1v_NC = NaN;
        s2v_NC = NaN;
        B_12_NC = NaN;
        B_34_NC = NaN;        
    end



end 